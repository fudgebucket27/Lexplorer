@inject LoopringGraphQLService LoopringGraphQLService;
@inject NavigationManager NavigationManager;
@inject IAppCache AppCache;
@page "/transactions";

<PageTitle>The Lexplorer - Transactions</PageTitle>

<MudTable Dense="true" Striped="true" Bordered="true" Items="@transactions" Hover="true" Loading=@isLoading>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Latest transactions</MudText>
        <MudSpacer />
        <OpenEndedPager @bind-PageNumber="gotoPage" IsLastPage=@(transactions!.Count < pageSize) />
        <MudSpacer />
        <MudSelect @bind-Value="@filterTransaction" T="string" Label="Filter by type">
            <MudSelectItem Value="@("All")" />
            @foreach (var item in Transaction.typeNames)
            {
                <MudSelectItem Value="@item" />
            }
        </MudSelect>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Tx Id</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>From</MudTh>
        <MudTh>To</MudTh>
        <MudTh Style="text-align:right">Bought</MudTh>
        <MudTh Style="text-align:right">Sold</MudTh>
        <MudTh Style="text-align:right">Fee</MudTh>
        <MudTh>Verified At (UTC)</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Transaction Id">@LinkHelper.GetObjectLink(context)</MudTd>
        <MudTd DataLabel="Type">@context.typeName</MudTd>
        <TransactionTableDetails TransactionData=@context />
        <MudTd DataLabel="Timestamp">@context.verifiedAt</MudTd>
    </RowTemplate>
</MudTable>
<OpenEndedPager @bind-PageNumber="gotoPage" IsLastPage=@(transactions!.Count < pageSize) IsOptionalBottomPager="true" />


@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string pageNumber { get; set; } = "1";

    public int gotoPage
    {
        get
        {
            return int.Parse(pageNumber ?? "1");
        }
        set
        {
            pageNumber = value.ToString();
            var URL = NavigationManager.GetUriWithQueryParameter(nameof(pageNumber), pageNumber);
            NavigationManager.NavigateTo(URL);
        }
    }

    public bool isLoading = true;
    public readonly int pageSize = 25;

    private IList<Transaction>? transactions { get; set; } = new List<Transaction>();

    [Parameter]
    [SupplyParameterFromQuery]
    public string? type { get; set; }

    public string? filterTransaction
    {
        get
        {
            return type ?? "All";
        }
        set
        {
            type = (string.Equals(value ?? "All", "All", StringComparison.InvariantCultureIgnoreCase)) ? null : value;
            var URL = NavigationManager.GetUriWithQueryParameter(nameof(type), type);
            NavigationManager.NavigateTo(URL);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;

        string transactionCacheKey = $"transactions-page{gotoPage}-type{type}";
        transactions = await AppCache.GetOrAddAsyncNonNull(transactionCacheKey,
            async () => await LoopringGraphQLService.GetTransactions((gotoPage - 1) * pageSize, pageSize, typeName: type),
            DateTimeOffset.UtcNow.AddMinutes(10));
        isLoading = false;
        StateHasChanged();
    }

}
