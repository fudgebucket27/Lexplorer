@page "/blocks"
@inject LoopringGraphQLService LoopringGraphQLService;
@inject NavigationManager NavigationManager;
@inject IAppCache AppCache;

<PageTitle>The Lexplorer - Blocks</PageTitle>

<MudTable Dense="true" Striped="true" Bordered="true" Items="@blocks" Hover="true" Loading=@isLoading>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Latest blocks</MudText>
        <MudSpacer />
        <OpenEndedPager @bind-PageNumber="@gotoPage" IsLastPage="@(blocks?.Count < pageSize)" />
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Block ID</MudTh>
        <MudTh>L1 Transaction Hash</MudTh>
        <MudTh>Block Size</MudTh>
        <MudTh>Verified At(UTC)</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Block Id"><a Class="mud-theme-primary" href="blocks/@context.id">@context.id</a></MudTd>
        <MudTd DataLabel="L1 Tx"><L1TransactionLink txHash="@context.txHash"></L1TransactionLink></MudTd>
        <MudTd DataLabel="Block Size">@context.blockSize</MudTd>
        <MudTd DataLabel="Timestamp">@TimestampConverter.ToUTCString(@context.timestamp!)</MudTd>
    </RowTemplate>
</MudTable>
<OpenEndedPager @bind-PageNumber="@gotoPage" IsLastPage="@(blocks?.Count < pageSize)" IsOptionalBottomPager="true" />

@code {
    private List<Lexplorer.Models.Block>? blocks = new();
    private Proxy? proxy;

    [Parameter]
    [SupplyParameterFromQuery]
    public string pageNumber { get; set; } = "1";

    public int gotoPage
    {
        get
        {
            return Math.Max(1, int.Parse(pageNumber ?? "1"));
        }
        set
        {
            pageNumber = value.ToString();
            var URL = NavigationManager.GetUriWithQueryParameter(nameof(pageNumber), pageNumber);
            NavigationManager.NavigateTo(URL);
        }
    }


    public bool isLoading = true;
    public readonly int pageSize = 25;

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        string blockCacheKey = $"blocks-{gotoPage}";
        var blocksDTO = await AppCache.GetOrAddAsyncNonNull(blockCacheKey,
            async () => await LoopringGraphQLService.GetBlocks((gotoPage - 1) * pageSize, pageSize),
            DateTimeOffset.UtcNow.AddMinutes(10));
        blocks = blocksDTO?.blocks ?? new();
        proxy = blocksDTO?.proxy;
        isLoading = false;
        StateHasChanged();
    }

}
