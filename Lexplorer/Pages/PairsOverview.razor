@page "/pairs"
@inject LoopringGraphQLService LoopringGraphQLService;
@inject UniswapGraphQLService UniswapGraphQLService;
@inject IAppCache AppCache;

@inject NavigationManager NavigationManager;

<PageTitle>The Lexplorer - Pairs</PageTitle>

<MudTable Dense="true" Striped="true" Bordered="true" Items="@pairs" Hover="true" Loading=@isLoading>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Pairs</MudText>
        <MudSpacer />
        <OpenEndedPager @bind-PageNumber="@gotoPage" IsLastPage="@((pairs?.Count ?? pageSize) < pageSize)" />
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Pair</MudTh>
        <MudTh Style="text-align:right">Volume 24H</MudTh>
        <MudTh Style="text-align:right">Volume 7D</MudTh>
    </HeaderContent>
    <RowTemplate>
        <Lexplorer.Components.PairsTableDetails pair="@context" uniswapTokens="@uniswapTokens" />
    </RowTemplate>
</MudTable>
<OpenEndedPager @bind-PageNumber="@gotoPage" IsLastPage="@((pairs?.Count ?? pageSize) < pageSize)" IsOptionalBottomPager="true" />

@code {
    private List<Lexplorer.Models.Pair>? pairs { get; set; } = new();
    private Dictionary<string, UniswapToken> uniswapTokens = new();

    [Parameter]
    [SupplyParameterFromQuery]
    public string pageNumber { get; set; } = "1";

    public int gotoPage
    {
        get
        {
            return Int32.Parse(pageNumber ?? "1");
        }
        set
        {
            pageNumber = value.ToString();
            var URL = NavigationManager.GetUriWithQueryParameter(nameof(pageNumber), pageNumber);
            NavigationManager.NavigateTo(URL);
        }
    }

    public bool isLoading = true;
    public readonly int pageSize = 10;

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(pageNumber))
        {
            pageNumber = "1";
        }
        isLoading = true;
        string pairsCacheKey = $"pairsOverview-pairs-page{pageNumber}";
        pairs = await AppCache.GetOrAddAsyncNonNull(pairsCacheKey,
            async () => await LoopringGraphQLService.GetPairs((gotoPage - 1) * pageSize, pageSize),
            DateTimeOffset.UtcNow.AddHours(1));
        if (pairs == null) return;
        foreach (var pair in pairs!)
        {
            if (string.IsNullOrEmpty(pair.token1?.address)) continue;

            string uniswapTokenCacheKey = $"uniSwapTokenPrice-{pair.token1?.address}";
            var uniswapToken = await AppCache.GetOrAddAsyncNonNull(uniswapTokenCacheKey,
                async () => await UniswapGraphQLService.GetTokenPrice(pair.token1?.address!),
                DateTimeOffset.UtcNow.AddHours(1));
            if (string.IsNullOrEmpty(uniswapToken?.address)) continue;

            uniswapTokens.TryAdd(uniswapToken.address!, uniswapToken);
        }
        isLoading = false;
    }
}
