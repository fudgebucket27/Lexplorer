@page "/collections/{tokenAddress}"
@using System.Diagnostics
@inject LoopringGraphQLService LoopringGraphQLService;
@inject EthereumService EthereumService;
@inject NftMetadataService NftMetadataService;
@inject NavigationManager NavigationManager;
@inject IAppCache AppCache;

<PageTitle>The Lexplorer - NFT Collection</PageTitle>

<MudContainer Fixed="true" Class="px-0 extra-extra-extra-large">
    <MudText Typo="Typo.h6">NFT Contract Address <L1AccountLink address="@tokenAddress" shortenAddress="false" /></MudText>
    <br />
    <MudGrid>
        <MudItem xs="12" Class="d-flex justify-center">
            <MudPaper Width="100%" >
            <MudToolBar Class="justify-center">
                <MudPagination Size="Size.Small" ShowFirstButton="true" 
                                BoundaryCount="1" 
                                MiddleCount="1" 
                                ShowLastButton="true" 
                                Selected="@goToPage"
                                Count="@goToNextPage"
                                SelectedChanged="@((int page) => goToPage = page)"/>
                        </MudToolBar>
                        </MudPaper>
                    </MudItem>
        @if (collectionNFTSlots != null && collectionNFTSlots.Count > 0)
        {
            @foreach (var slot in collectionNFTSlots!)
            {
                var metaData = GetMetadata(slot.nftID);
                <MudItem xs="12" sm="4" md="4" lg="2">
                    <MudCard Style="height:100%;position:relative" Class="ma-1 border-solid">
                           <MudCardMedia Image="@NftMetadataService.MakeIPFSLink(metaData?.image)" Style="object-fit:contain" />
                           <MudCardContent>
                               <MudText Typo="Typo.h6">@metaData?.name</MudText>
                               <MudText Typo="Typo.body2">@metaData?.description</MudText>
                           </MudCardContent>
                           <MudCardActions>
                               <MudButton Style="position:absolute;bottom:0;" Variant="Variant.Text" Color="Color.Primary" Link=@LinkHelper.GetObjectLinkAddress(slot)?.Item1>Go to NFT</MudButton>
                           </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }
        else
        {
            <MudText class="pa-3">No NFTs</MudText>
        }
        <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
            <MudPaper Width="100%" Class="mx-4">
                <MudToolBar Class="justify-center">
                    <MudPagination Size="Size.Small" ShowFirstButton="true" 
                    BoundaryCount="1" 
                    MiddleCount="1" 
                    ShowLastButton="true" 
                    Selected="@goToPage"
                    Count="@goToNextPage"
                    SelectedChanged="@((int page) => goToPage = page)"/>
                 </MudToolBar>
           </MudPaper>
       </MudHidden>
       <MudDivider DividerType="DividerType.Middle" Class="my-6"/>
    </MudGrid>
</MudContainer>

@code {
    [Parameter]
    public string? tokenAddress { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string pageNumber { get; set; } = "1";

    public int goToPage
    {
        get
        {
            return int.TryParse(pageNumber, out int np) ? np : 1;
        }
        set
        {
            pageNumber = value.ToString(); //set immediately for MudPagination to not switch forth and back
            string URL = $"/collections/{tokenAddress}?pageNumber={value}";
            NavigationManager.NavigateTo(URL);
        }
    }

    public int goToNextPage
    {
        get
        {
            return int.TryParse(pageNumber, out int np) ? np + 1 : 1;
        }
    }

    public readonly int pageSize = 12; //6 per row
    private CancellationTokenSource? cts;
    private IList<NonFungibleToken>? collectionNFTSlots { get; set; } = new List<NonFungibleToken>();
    private Dictionary<string, NftMetadata> NFTdata { get; set; } = new Dictionary<string, NftMetadata>();
    protected override async Task OnParametersSetAsync()
    {
        //cancel any previous OnParametersSetAsync which might still be running
        cts?.Cancel();

        using (CancellationTokenSource localCTS = new CancellationTokenSource())
        {
            //give future calls a chance to cancel us; it is now safe to replace
            //any previous value of cts, since we already cancelled it above
            cts = localCTS;
            try
            {
                if (String.IsNullOrEmpty(tokenAddress)) return;
                if (string.IsNullOrEmpty(pageNumber))
                {
                    pageNumber = "1";
                }

                string collectionNftKey = $"collection-{tokenAddress}-page-{pageNumber}";
                collectionNFTSlots = await AppCache.GetOrAddAsyncNonNull(collectionNftKey,
                    async () => await LoopringGraphQLService.GetCollectionNFTs(tokenAddress, (goToPage - 1) * pageSize, cancellationToken: localCTS.Token),
                    DateTimeOffset.UtcNow.AddMinutes(10));
                localCTS.Token.ThrowIfCancellationRequested();
                Dictionary<string, NftMetadata> localNFTdata = new Dictionary<string, NftMetadata>();
                NFTdata = localNFTdata;
                if (collectionNFTSlots != null)
                {
                    StateHasChanged();
                    foreach (var slot in collectionNFTSlots!)
                    {
                        string nftMetadataLinkCacheKey = $"collection-{tokenAddress}-nftMetadataLink-{slot.nftID}";
                        string? nftMetadataLink = await AppCache.GetOrAddAsyncNonNull(nftMetadataLinkCacheKey,
                            async () => await EthereumService.GetMetadataLink(slot.nftID, tokenAddress, slot.nftType),
                            DateTimeOffset.UtcNow.AddHours(1));
                        if (string.IsNullOrEmpty(nftMetadataLink)) continue;

                        string nftMetadataCacheKey = $"collection-{tokenAddress}-nftMetadata-{nftMetadataLink}";
                        var nftMetadata = await AppCache.GetOrAddAsyncNonNull(nftMetadataCacheKey,
                            async () => await NftMetadataService.GetMetadata(nftMetadataLink, localCTS.Token),
                            DateTimeOffset.UtcNow.AddHours(1));
                        localCTS.Token.ThrowIfCancellationRequested();
                        if (nftMetadata == null) continue;

                        localNFTdata.Add(slot.nftID!, nftMetadata);
                        StateHasChanged();
                    }
                }
                StateHasChanged();
            }
            catch (OperationCanceledException)
            {
            }
            catch (Exception e)
            {
                Trace.WriteLine(e.StackTrace + "\n" + e.Message);
            }
            //now for cleanup, we must clear cts, but only if it is still our localCTS, which we're about to dispose
            //otherwise a new call has already replaced cts with it's own localCTS
            Interlocked.CompareExchange<CancellationTokenSource?>(ref cts, null, localCTS);
        }
    }

    private NftMetadata? GetMetadata(string? nftID)
    {
        NftMetadata? data = null;
        if (nftID != null)
        {
            NFTdata.TryGetValue(nftID, out data);
        }
        return data;
    }

 }
