@page "/nfts/collections/{tokenAddress}"
@using System.Diagnostics
@inject LoopringGraphQLService LoopringGraphQLService;
@inject EthereumService EthereumService;
@inject NftMetadataService NftMetadataService;
@inject NavigationManager NavigationManager;
@inject IAppCache AppCache;
@inject IDialogService DialogService;

<PageTitle>The Lexplorer - NFT Collection</PageTitle>

<MudContainer Fixed="true" Class="px-0 extra-extra-extra-large">
    <MudSimpleTable Dense="true" Striped="true" Bordered="true">
        <tbody>
            <tr>
                <td colspan="2">
                    <div class="mud-toolbar mud-toolbar-gutters mud-table-toolbar">
                        <MudText Typo="Typo.h6">@($"NFT collection: {collectionMetadata?.name ?? tokenAddress}")</MudText>
                    </div>
                </td>
            </tr>
            <tr>
                <td>Contract address</td>
                <td><L1AccountLink address="@tokenAddress" shortenAddress="false" /></td>
            </tr>
            @if (collectionMetadata != null)
            {
                <tr>
                    <td>Description</td>
                    <td>@collectionMetadata?.description</td>
                </tr>
                <tr>
                    <td>Thumbnail</td>
                    <td Style="word-break:break-all;">@collectionMetadata?.thumbnail_uri</td>
                </tr>
                <tr>
                    <td>Banner</td>
                    <td Style="word-break:break-all;">@collectionMetadata?.banner_uri</td>
                </tr>
                <tr>
                    <td>Avatar</td>
                    <td Style="word-break:break-all;">@collectionMetadata?.avatar_uri</td>
                </tr>
                <tr>
                    <td>Tile</td>
                    <td Style="word-break:break-all;">@collectionMetadata?.tile_uri</td>
                </tr>
                <tr>
                    <td colspan="2">
                        <img src="@NftMetadataService.MakeIPFSLink(collectionMetadata?.thumbnail_uri)" class="nft" />
                    </td>
                </tr>
            }
            @if ((collectionMetadata?.JSONContent) != null)
            {
                <tr>
                    <td colspan="2">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="showJSON" Class="mr-2">View Metadata</MudButton>
                    </td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>

    <br />

    <br />
    <NFTGrid @ref="nftGrid" @bind-PageNumber="@goToPage" NFTSlots="@collectionNFTSlots" PageCount="@maxPageCount" />
</MudContainer>

@code {
    private NFTGrid nftGrid = default!;

    [Parameter]
    public string? tokenAddress { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string pageNumber { get; set; } = "1";

    public int goToPage
    {
        get
        {
            return int.TryParse(pageNumber, out int np) ? np : 1;
        }
        set
        {
            var URL = NavigationManager.GetUriWithQueryParameter(nameof(pageNumber), value);
            NavigationManager.NavigateTo(URL);
        }
    }

    public readonly int pageSize = 12; //6 per row

    public int maxPageCount { get; set; } = 1;

    private CancellationTokenSource? cts;
    private IList<AccountNFTSlot>? collectionNFTSlots { get; set; }
    private NftCollectionMetadata? collectionMetadata { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        //quickly and early ensure that maxPageCount never get's smaller than the page we're on
        maxPageCount = Math.Max(maxPageCount, goToPage);

        //cancel any previous OnParametersSetAsync which might still be running
        cts?.Cancel();

        using (CancellationTokenSource localCTS = new CancellationTokenSource())
        {
            //give future calls a chance to cancel us; it is now safe to replace
            //any previous value of cts, since we already cancelled it above
            cts = localCTS;
            try
            {
                if (string.IsNullOrEmpty(tokenAddress)) return;

                string collectionNftKey = $"collection-{tokenAddress}-page-{goToPage}";
                var collectionNFTs = await AppCache.GetOrAddAsyncNonNull(collectionNftKey,
                    async () => await LoopringGraphQLService.GetCollectionNFTs(tokenAddress, (goToPage - 1) * pageSize, cancellationToken: localCTS.Token),
                    DateTimeOffset.UtcNow.AddMinutes(10));
                localCTS.Token.ThrowIfCancellationRequested();
                maxPageCount = Math.Max(maxPageCount, goToPage + (collectionNFTs?.Count < pageSize ? 0 : 1));

                //transform list of nfts to list of accountsSlots with everything else empty/null
                collectionNFTSlots = collectionNFTs?.
                    Select(NFT => new AccountNFTSlot() { nft = NFT }).ToList();
                StateHasChanged();

                var metaData = await nftGrid.LoadNFTMetaData(collectionNFTSlots!.FirstOrDefault());
                if (string.IsNullOrEmpty(metaData?.collection_metadata)) return;

                string collectionMetaDataKey = $"collectionMetadata-{tokenAddress}";
                collectionMetadata = await AppCache.GetOrAddAsyncNonNull(collectionNftKey,
                    async () => await NftMetadataService.GetCollectionMetadata(metaData.collection_metadata!, cancellationToken: localCTS.Token),
                    DateTimeOffset.UtcNow.AddMinutes(10));
                localCTS.Token.ThrowIfCancellationRequested();
                StateHasChanged();
            }
            catch (OperationCanceledException)
            {
            }
            catch (Exception e)
            {
                Trace.WriteLine(e.StackTrace + "\n" + e.Message);
            }
            //now for cleanup, we must clear cts, but only if it is still our localCTS, which we're about to dispose
            //otherwise a new call has already replaced cts with it's own localCTS
            Interlocked.CompareExchange<CancellationTokenSource?>(ref cts, null, localCTS);
        }
    }

    public void showJSON()
    {
        var parameters = new DialogParameters();
        parameters.Add("JSON", collectionMetadata?.JSONContent);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        DialogService.Show<NFTMetadataDialog>("NFT collection metadata JSON", parameters, options);
    }

}
