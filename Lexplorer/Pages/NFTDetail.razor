@page "/nfts/{nftId}"
@using System.Diagnostics
@inject IAppCache AppCache;
@inject NavigationManager NavigationManager;
@inject LoopringGraphQLService LoopringGraphQLService;
@inject EthereumService EthereumService;
@inject NftMetadataService NftMetadataService;
@inject IDialogService DialogService;
@inject ENSCacheService ENSCacheService;

@using DomainsDictionary = Dictionary<string, Lexplorer.Models.ENS.SourceType>;
@using AddressDomainsDictionary = Dictionary<string, Dictionary<string, Lexplorer.Models.ENS.SourceType>>;

<PageTitle>The Lexplorer - NFT @nft?.nftID </PageTitle>

<MudSimpleTable Dense="true" Striped="true" Bordered="true">
    <tbody>
        <tr>
            <td colspan="2">
                <div class="mud-toolbar mud-toolbar-gutters mud-table-toolbar">
                    <MudText Typo="Typo.h6">@(nftMetadata?.name ?? $"NFT {nft?.nftID}")</MudText>
                </div>
            </td>
        </tr>
        <tr>
            <td>Description</td>
            <td>@nftMetadata?.description</td>
        </tr>
        <tr>
            <td>NFT type</td>
            <td>@nft?.nftTypeName</td>
        </tr>
        <tr>
            <td>Royalty percentage</td>
            <td>@nftMetadata?.royalty_percentage%</td>
        </tr>
        <tr>
            <td>nftID</td>
            <td Style="word-break:break-all;">@nft?.nftID</td>
        </tr>
        <tr>
            <td>Minter</td>
            <td Style="word-break:break-all;">@LinkHelper.CreateUserLink(nft?.minter, false, true) </td>
        </tr>
        <tr>
            <td>Minted at</td>
            <td Style="word-break:break-all;">@LinkHelper.GetObjectLink(nft?.mintedAtTransaction) </td>
        </tr>
        <tr>
            <td>Minted amount</td>
            <td Style="word-break:break-all;">@nft?.mintedAtTransaction?.amount</td>
        </tr>
        <tr>
            <td>Token address</td>
            <td Style="word-break:break-all;"><L1AccountLink address="@nft?.token" shortenAddress="false" /></td>
        </tr>
        <tr>
            <td>MetaData URL</td>
            <td Style="word-break:break-all;">
                @if (@nftMetadata?.URL != null)
                {
                    <a Class="mud-theme-primary" href="@nftMetadata?.GatewayURL" target="_blank">@nftMetadata?.URL</a>
                    <MudIcon Icon="@Icons.Filled.Link" Color="Color.Primary" Title="Link to IPFS gateway" Size="Size.Small" />
                }
            </td>
        </tr>
        <tr>
            <td>Image URL</td>
            <td Style="word-break:break-all;">
                @if (@nftMetadata?.image != null)
                {
                    <a Class="mud-theme-primary" href="@NftMetadataService.MakeIPFSLink(nftMetadata?.image)" target="_blank">@nftMetadata?.image</a>
                    <MudIcon Icon="@Icons.Filled.Link" Color="Color.Primary" Title="Link to IPFS gateway" Size="Size.Small" />
                }
            </td>
        </tr>
        <tr>
            <td>Animation URL</td>
            <td Style="word-break:break-all;">
                @if (@nftMetadata?.animation_url != null)
                {
                    <a Class="mud-theme-primary" href="@NftMetadataService.MakeIPFSLink(nftMetadata?.animation_url)" target="_blank">@nftMetadata?.animation_url</a>
                    <MudIcon Icon="@Icons.Filled.Link" Color="Color.Primary" Title="Link to IPFS gateway" Size="Size.Small" />
                }
            </td>
        </tr>
        @if ((nftMetadata?.attributes?.Count > 0) || (nftMetadata?.properties?.Count > 0))
        {
            <tr>
                <td colspan="2">
                    <MudExpansionPanels MultiExpansion="true">
                        @if (nftMetadata?.attributes?.Count > 0)
                        {
                            <LexpansionPanel Text="Traits">
                                <MudSimpleTable Dense="true" Striped="true" Bordered="true">
                                    <tbody>
                                        @foreach (var trait in nftMetadata?.attributes!)
                                        {
                                            <tr>
                                                <td>@trait.trait_type</td>
                                                <td>@trait.value</td>
                                            </tr>
                                        }
                                    </tbody>
                                </MudSimpleTable>
                            </LexpansionPanel>
                        }
                        @if (nftMetadata?.properties?.Count > 0)
                        {
                            <LexpansionPanel Text="Properties">
                                <MudSimpleTable Dense="true" Striped="true" Bordered="true">
                                    <tbody>
                                        @foreach (var pair in nftMetadata?.properties!)
                                        {
                                            <tr>
                                                <td>@pair.Key</td>
                                                <td>@pair.Value</td>
                                            </tr>
                                        }
                                    </tbody>
                                </MudSimpleTable>
                            </LexpansionPanel>
                        }
                    </MudExpansionPanels>
                </td>
            </tr>
        }
        <tr>
            <td colspan="2">
                <NFTContent nftMetadata="@nftMetadata" />
            </td>
        </tr>
        @if (nftMetadata?.Error != null)
        {
            <tr>
                <td colspan="2">
                    <MudAlert Severity="Severity.Error"> @nftMetadata?.Error </MudAlert>
                </td>
            </tr>
        }
        @if ((nft?.token ?? nftMetadata?.JSONContent) != null)
        {
            <tr>
                <td colspan="2">
                    @if (nft?.token != null)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="goToCollectionPage" Class="mr-2">View collection</MudButton>
                    }
                    @if (nftMetadata?.JSONContent != null)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="showJSON" Class="mr-2">View Metadata</MudButton>
                    }
                </td>
            </tr>
        }
    </tbody>
</MudSimpleTable>

<br />
<MudExpansionPanels MultiExpansion="true">
    <LexpansionPanel Text="Transactions">
        <ChildContent>
            <MudTable Dense="true" Striped="true" Bordered="true" Items="@transactions" Hover="true" Loading=@isLoading>
                <ToolBarContent>
                    <MudSpacer />
                    <OpenEndedPager @bind-PageNumber="gotoPage" IsLastPage="@(transactions!.Count < pageSize)" />
                    <MudSpacer />
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Tx Id</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>From</MudTh>
                    <MudTh>To</MudTh>
                    <MudTh Style="text-align:right">Bought</MudTh>
                    <MudTh Style="text-align:right">Sold</MudTh>
                    <MudTh Style="text-align:right">Fee</MudTh>
                    <MudTh>Verified At (UTC)</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Transaction Id">@LinkHelper.GetObjectLink(context)</MudTd>
                    <MudTd DataLabel="Type">@context.typeName</MudTd>
                    <TransactionTableDetails TransactionData=@context />
                    <MudTd DataLabel="Timestamp">@context.verifiedAt</MudTd>
                </RowTemplate>
            </MudTable>
            <OpenEndedPager @bind-PageNumber="gotoPage" IsLastPage="@(transactions!.Count < pageSize)" IsOptionalBottomPager="true" />
        </ChildContent>
    </LexpansionPanel>
    <LexpansionPanel Text="Holders">
        <ChildContent>
            <MudTable Dense="true" Striped="true" Bordered="true" Items="@holders" Hover="true" Loading=@isLoadingHolders>
                <ToolBarContent>
                    <MudSpacer />
                    <OpenEndedPager @bind-PageNumber="goToHolderPage" IsLastPage="@(holders!.Count < pageSize)" />
                    <MudSpacer />
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Account Id</MudTh>
                    <MudTh>Address</MudTh>
                    <MudTh>ENS</MudTh>
                    <MudTh>Balance</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Account Id">@LinkHelper.GetObjectLink(context?.account)</MudTd>
                    <MudTd DataLabel="L1 Address"><L1AccountLink address="@context?.account?.address" /></MudTd>
                    <MudTd DataLabel="ENS"><ENSList ensDomains="@GetENS(context?.account?.address)" /></MudTd>
                    <MudTd DataLabel="Balance">@context?.balance</MudTd>
                </RowTemplate>
            </MudTable>
            <OpenEndedPager @bind-PageNumber="goToHolderPage" IsLastPage="@(holders!.Count < pageSize)" IsOptionalBottomPager="true" />
        </ChildContent>
    </LexpansionPanel>
</MudExpansionPanels>

@code {
    [Parameter]
    public string nftId { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string pageNumber { get; set; } = "1";

    [Parameter]
    [SupplyParameterFromQuery]
    public string nftHolderPageNumber { get; set; } = "1";

    private NonFungibleToken? nft;
    private IList<Transaction>? transactions { get; set; } = new List<Transaction>();
    private IList<AccountNFTSlot>? holders { get; set; } = new List<AccountNFTSlot>();
    private AddressDomainsDictionary? ensDictionary { get; set; }
    public bool isLoading = true;
    public bool isLoadingHolders = true;
    public readonly int pageSize = 25;
    private NftMetadata? nftMetadata;

    public int gotoPage
    {
        get
        {
            return int.Parse(pageNumber ?? "1");
        }
        set
        {
            var URL = NavigationManager.GetUriWithQueryParameter(nameof(pageNumber), value);
            NavigationManager.NavigateTo(URL);
        }
    }

    public int goToHolderPage
    {
        get
        {
            return int.Parse(nftHolderPageNumber ?? "1");
        }
        set
        {
            var URL = NavigationManager.GetUriWithQueryParameter(nameof(nftHolderPageNumber), value);
            NavigationManager.NavigateTo(URL);
        }
    }

    private DomainsDictionary? GetENS(string? address)
    {
        DomainsDictionary? retValue = null;
        if (address != null)
            ensDictionary?.TryGetValue(address, out retValue);
        return retValue;
    }

    private CancellationTokenSource? cts;

    protected override async Task OnParametersSetAsync()
    {
        //cancel any previous OnParametersSetAsync which might still be running
        cts?.Cancel();

        using (CancellationTokenSource localCTS = new CancellationTokenSource())
        {
            //give future calls a chance to cancel us; it is now safe to replace
            //any previous value of cts, since we already cancelled it above
            Interlocked.Exchange<CancellationTokenSource?>(ref cts, localCTS);
            try
            {
                isLoading = true;
                if (nft != null && nft.id != nftId) //did we change to another NFT?
                {
                    nft = null;
                    transactions = new List<Transaction>();
                    holders = new List<AccountNFTSlot>();
                    ensDictionary = null;
                    pageNumber = "1";
                    StateHasChanged();
                }
                if (nftId == null) return;
                if (nft == null)
                {
                    nftMetadata = null;
                    string nftCacheKey = $"nft-{nftId}";
                    nft = await AppCache.GetOrAddAsyncNonNull(nftCacheKey,
                        async () => await LoopringGraphQLService.GetNFT(nftId, localCTS.Token),
                        DateTimeOffset.UtcNow.AddHours(1));
                    if (nft == null) return;
                    StateHasChanged();
                }

                if (string.IsNullOrEmpty(pageNumber))
                {
                    pageNumber = "1";
                }

                string nftTransactionCacheKey = $"nft{nftId}-transactions-page{pageNumber}";
                transactions = await AppCache.GetOrAddAsyncNonNull(nftTransactionCacheKey,
                    async () => await LoopringGraphQLService.GetNFTTransactions((gotoPage - 1) * pageSize, pageSize, nftId, localCTS.Token),
                    DateTimeOffset.UtcNow.AddMinutes(10));
                isLoading = false;
                StateHasChanged();

                // Get NFT Holders
                string nftHoldersCacheKey = $"nft{nftId}-holders-page{nftHolderPageNumber}";
                holders = await AppCache.GetOrAddAsyncNonNull(nftHoldersCacheKey,
                    async () => await LoopringGraphQLService.GetNftHolders(nftId, (goToHolderPage - 1) * pageSize, pageSize, cancellationToken: localCTS.Token),
                    DateTimeOffset.UtcNow.AddMinutes(10));

                List<string>? addressList = holders?.Select(x => x?.account?.address).OfType<string>().ToList();

                ensDictionary = ENSCacheService.GetCachedENS(ref addressList);
                if ((addressList?.Count ?? 0) > 0)
                {
                    StateHasChanged();
                    ensDictionary = await ENSCacheService.ReverseLookupAddressList(addressList, ensDictionary, localCTS.Token);
                }

                isLoadingHolders = false;
                StateHasChanged();

                //load the NFT metadata last - it might actually take the longest and other services are queried etc.
                if (nftMetadata == null)
                {
                    string nftMetadataLinkCacheKey = $"nftMetadataLink-{nft?.nftID}";
                    string? nftMetadataLink = await AppCache.GetOrAddAsyncNonNull(nftMetadataLinkCacheKey,
                        async () => await EthereumService.GetMetadataLink(nft?.nftID, nft?.token, nft?.nftType));
                    if (string.IsNullOrEmpty(nftMetadataLink)) return;

                    string nftMetadataCacheKey = $"nftMetadata-{nftMetadataLink}";
                    nftMetadata = await AppCache.GetOrAddAsyncNonNull(nftMetadataCacheKey,
                        async () => await NftMetadataService.GetMetadata(nftMetadataLink, localCTS.Token));
                    if (!string.IsNullOrEmpty(nftMetadata?.animation_url))
                    {
                        string nftMetadataContentTypeCacheKey = $"nftMetadata-contentType-{nftMetadataLink}";
                        try
                        {
                            nftMetadata!.contentType = await AppCache.GetOrAddAsyncNonNull(nftMetadataContentTypeCacheKey,
                                async () => await NftMetadataService.GetContentTypeFromURL(nftMetadata.animation_url!, localCTS.Token));
                        }
                        catch (OperationCanceledException)
                        {
                            throw;
                        }
                        catch (Exception e)
                        {
                            if ((nftMetadata!.Error == null) || (!nftMetadata!.Error!.EndsWith(e.Message)))
                                nftMetadata!.Error = String.Join(System.Environment.NewLine, nftMetadata.Error, e.Message);
                        }
                    }
                    StateHasChanged();
                }

            }
            catch (OperationCanceledException)
            {
            }
            catch (Exception e)
            {
                Trace.WriteLine(e.StackTrace + "\n" + e.Message);
            }
            finally
            {
                //now for cleanup, we must clear cts, but only if it is still our localCTS, which we're about to dispose
                //otherwise a new call has already replaced cts with it's own localCTS
                Interlocked.CompareExchange<CancellationTokenSource?>(ref cts, null, localCTS);
            }
        }
    }


    public void goToCollectionPage()
    {
        string URL = $"/nfts/collections/{nft?.token}";
        NavigationManager.NavigateTo(URL);
    }

    public void showJSON()
    {
        var parameters = new DialogParameters();
        parameters.Add("JSON", nftMetadata?.JSONContent);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        DialogService.Show<NFTMetadataDialog>("NFT metadata JSON", parameters, options);
    }

}

