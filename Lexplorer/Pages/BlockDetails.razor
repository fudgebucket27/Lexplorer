@page "/blocks/{blockNumber}"
@using System.Diagnostics;
@inject LoopringGraphQLService LoopringGraphQLService;
@inject NavigationManager NavigationManager;
@inject IAppCache AppCache;

<PageTitle>The Lexplorer - Block Details</PageTitle>


<MudSimpleTable Dense="true" Striped="true" Bordered="true">
    <tbody>
        <tr>
            <td colspan="2">
                <div>
                    <MudIconButton Icon="@Icons.Filled.FirstPage" Disabled=@(blockId == 1) OnClick="@(() => blockId = 1)" />
                    <MudIconButton Icon="@Icons.Filled.NavigateBefore" Disabled=@(blockId == 1) OnClick="@(() => blockId -= 1)" />
                    <MudText Typo="Typo.h6" Inline="true">Block #@block?.id</MudText>
                    <MudIconButton Icon="@Icons.Filled.NavigateNext" Disabled=@(blockId == (proxy?.blockCount ?? 0)) OnClick="@(() => blockId += 1)" />
                </div>
            </td>
        </tr>
        @if (isBlockLoading)
        {
            <tr>
                <td colspan="2">
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                </td>
            </tr>
        }
        <tr>
            <td>Block Hash</td>
            <td>@block?.blockHash</td>
        </tr>
        <tr>
            <td>Block Size</td>
            <td>@block?.blockSize</td>
        </tr>
        <tr>
            <td>L1 Transaction Hash</td>
            <td><L1TransactionLink txHash="@block?.txHash" shortenHash="false"></L1TransactionLink></td>
        </tr>
        <tr>
            <td>Verified At (UTC)</td>
            <td>@TimestampConverter.ToUTCString(block?.timestamp!)</td>
        </tr>
        <tr>
            <td>Raw Data</td>
            <td>
                <MudTextField T="string" Variant="Variant.Filled" Text="@block?.data" Lines="5" ReadOnly="true" />
            </td>
        </tr>
    </tbody>
</MudSimpleTable>

<br />

<MudTable Dense="true" Items="@transactions" Hover="true" Loading="@isTransactionLoading">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Transactions in block #@block?.id</MudText>
        <MudSpacer />
        <OpenEndedPager @bind-PageNumber="@gotoPage" IsLastPage="@(transactions?.Count < pageSize)" />
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Tx Id</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>From</MudTh>
        <MudTh>To</MudTh>
        <MudTh Style="text-align:right">Bought</MudTh>
        <MudTh Style="text-align:right">Sold</MudTh>
        <MudTh Style="text-align:right">Fee</MudTh>
        <MudTh>Time(UTC)</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Tx Id">@LinkHelper.GetObjectLink(context)</MudTd>
        <MudTd DataLabel="Type">@context.typeName</MudTd>
        <TransactionTableDetails TransactionData=@context />
        <MudTd DataLabel="Time">@TimestampConverter.ToUTCString(@block?.timestamp)</MudTd>
    </RowTemplate>
</MudTable>
<OpenEndedPager @bind-PageNumber="@gotoPage" IsLastPage="@(transactions?.Count < pageSize)" IsOptionalBottomPager="true" />

@code {
    private Lexplorer.Models.Block? block;
    private Proxy? proxy;
    private List<Transaction>? transactions = new();

    [Parameter]
    public string blockNumber { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string pageNumber { get; set; } = "1";

    public int blockId
    {
        get
        {
            return Math.Max(1, int.Parse(blockNumber ?? "1"));
        }
        set
        {
            //blockNumber is not a query parameter, but a component (routing) parameter
            //have not found a way to get the modified URL without knowing it
            var URL = $"/blocks/{value.ToString()}";
            NavigationManager.NavigateTo(URL);
        }
    }

    public int gotoPage
    {
        get
        {
            return Math.Max(1, int.Parse(pageNumber ?? "1"));
        }
        set
        {
            pageNumber = value.ToString();
            var URL = NavigationManager.GetUriWithQueryParameter(nameof(pageNumber), pageNumber);
            NavigationManager.NavigateTo(URL);
        }
    }

    public bool isTransactionLoading = true;
    public bool isBlockLoading = true;
    private int pageSize = 15;
    private CancellationTokenSource? cts;

    protected override async Task OnParametersSetAsync()
    {
        //cancel any previous OnParametersSetAsync which might still be running
        cts?.Cancel();

        using (CancellationTokenSource localCTS = new CancellationTokenSource())
        {
            //give future calls a chance to cancel us; it is now safe to replace
            //any previous value of cts, since we already cancelled it above
            Interlocked.Exchange<CancellationTokenSource?>(ref cts, localCTS);
            try
            {
                transactions = new List<Transaction>();
                isBlockLoading = true;
                string blockCacheKey = $"blockDetailOverview-{blockId}";
                var blockDTO = await AppCache.GetOrAddAsyncNonNull(blockCacheKey,
                    async () => await LoopringGraphQLService.GetBlockDetails(blockId, localCTS.Token),
                    DateTimeOffset.UtcNow.AddMinutes(5));
                block = blockDTO?.block;
                proxy = blockDTO?.proxy;
                if (block == null) return;
                isBlockLoading = false;
                isTransactionLoading = true;
                StateHasChanged();

                string transactionDatacacheKey = $"blockDetailTransactions-{blockId}-page{gotoPage}";
                transactions = await AppCache.GetOrAddAsyncNonNull(transactionDatacacheKey,
                    async () => await LoopringGraphQLService.GetTransactions((gotoPage - 1) * pageSize, pageSize, blockId: blockNumber, cancellationToken: localCTS.Token),
                    DateTimeOffset.UtcNow.AddMinutes(5)) ?? new List<Transaction>();
                isTransactionLoading = false;
                StateHasChanged();

            }
            catch (OperationCanceledException)
            {
            }
            catch (Exception e)
            {
                Trace.WriteLine(e.StackTrace + "\n" + e.Message);
            }
            finally
            { 
                //now for cleanup, we must clear cts, but only if it is still our localCTS, which we're about to dispose
                //otherwise a new call has already replaced cts with it's own localCTS
                Interlocked.CompareExchange<CancellationTokenSource?>(ref cts, null, localCTS);
            }
        }
    }
}
