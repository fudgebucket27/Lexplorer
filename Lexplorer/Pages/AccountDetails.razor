@page "/account/{accountId}"
@using System.Diagnostics
@inject LoopringGraphQLService LoopringGraphQLService;
@inject LoopringPoolTokenCacheService poolTokenCacheService;
@inject EthereumService EthereumService;
@inject NftMetadataService NftMetadataService;
@inject NavigationManager NavigationManager;
@inject IDialogService DialogService;
@inject IAppCache AppCache;
@inject ENSCacheService ENSCacheService;

@using DomainsDictionary = Dictionary<string, Lexplorer.Models.ENS.SourceType>;

<PageTitle>The Lexplorer - Account</PageTitle>
<MudContainer Fixed="true" Class="px-0 extra-extra-extra-large">
    <MudSimpleTable Class="mt-3" Dense="true" Striped="true" Bordered="true">
        <tbody>
            <tr>
                <td colspan="2">
                    <div class="mud-toolbar mud-toolbar-gutters mud-table-toolbar">
                        <MudText Typo="Typo.h6">@account?.typeName #@account?.id</MudText>
                    </div>
                </td>
            </tr>
            <tr>
                <td>L1 Address</td>
                <td><L1AccountLink address="@account?.address" shortenAddress="false" /></td>
            </tr>
            <tr>
                <td>Account Type</td>
                <td>@account?.typeName</td>
            </tr>
            <tr>
                <td>Created At (UTC)</td>
                <td>@account?.createdAtTransaction?.verifiedAt</td>
            </tr>
            @if (account is User)
            {
                <tr>
                    <td>Public key</td>
                    <td>0x@((account as User)!.publicKey)</td>
                </tr>

            }
            @if (ensDomains != null)
            {
                <tr>
                    <td>ENS names</td>
                    <td>
                        <ENSList ensDomains="@ensDomains" />
                    </td>
                </tr>
            }
            @if (poolToken != null)
            {
                <tr>
                    <td>Pool token</td>
                    <td>@LinkHelper.GetObjectLink(poolToken?.token)</td>
                </tr>
                <tr>
                    <td>Pair</td>
                    <td>@LinkHelper.GetObjectLink(poolToken?.pair)</td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>

    <br />
    <MudExpansionPanels MultiExpansion="true">
        <LexpansionPanel Text="Token Balances">
            <ChildContent>
                <MudTable Dense="true" Striped="true" Bordered="true" Items="@account?.balances" Hover="true" Loading=@balancesLoading>
                    <HeaderContent>
                        <MudTh Style="text-align:right"><MudTableSortLabel SortBy="new Func<AccountTokenBalance, object>(x=>x.token!.name!)">Token</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<AccountTokenBalance, object>(x=>x.fBalance!)">Balance</MudTableSortLabel></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd Style="text-align:right" DataLabel="Token">@context.token!.name</MudTd>
                        <MudTd DataLabel="Balance">@TokenAmountConverter.ToString(context.balance, context.token!.decimals) @LinkHelper.GetObjectLink(context.token)</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        @if (account?.balances?.Count > 10)
                        {
                            <MudTablePager InfoFormat="@("{first_item}-{last_item} of {all_items}")" HorizontalAlignment="HorizontalAlignment.Left" />
                        }
                    </PagerContent>
                </MudTable>
            </ChildContent>
        </LexpansionPanel>
        <LexpansionPanel Text="NFTs">
            <ChildContent>
                <NFTGrid @bind-PageNumber="@gotoNFTPage" NFTSlots="@accountNFTSlots" PageCount="@nftPages" />
            </ChildContent>
        </LexpansionPanel>
        <LexpansionPanel Text="Transactions">
            <ChildContent>
                <MudTable Dense="true" Striped="true" Bordered="true" Items="@transactions" Hover="true" Loading=@isLoading>
                    <ToolBarContent>
                        <MudText Typo="Typo.h6" Class="d-none d-sm-flex">Transactions</MudText>
                        <MudText Typo="Typo.h6" Class="d-flex d-sm-none d-xs-none">Tx's</MudText>
                        <MudSpacer />
                        <OpenEndedPager @bind-PageNumber="gotoPage" IsLastPage="@(transactions!.Count < pageSize)" />
                        <MudSpacer />
                        <MudIconButton Icon="@Icons.Filled.Download" OnClick="ShowCSVOptions" />
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Tx Id</MudTh>
                        <MudTh>Type</MudTh>
                        <MudTh>From</MudTh>
                        <MudTh>To</MudTh>
                        <MudTh Style="text-align:right">Bought</MudTh>
                        <MudTh Style="text-align:right">Sold</MudTh>
                        <MudTh Style="text-align:right">Fee</MudTh>
                        <MudTh>Verified At (UTC)</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Transaction Id">@LinkHelper.GetObjectLink(context)</MudTd>
                        <MudTd DataLabel="Type">@context.typeName</MudTd>
                        <TransactionTableDetails TransactionData=@context ignoreUserIDForLink=@accountId />
                        <MudTd DataLabel="Timestamp">@context.verifiedAt</MudTd>
                    </RowTemplate>
                </MudTable>
                <OpenEndedPager @bind-PageNumber="gotoPage" IsLastPage="@(transactions!.Count < pageSize)" IsOptionalBottomPager="true" />
            </ChildContent>
        </LexpansionPanel>
    </MudExpansionPanels>
    <br />

</MudContainer>


@code {
    [Parameter]
    public string? accountId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string pageNumber { get; set; } = "1";

    public int gotoPage
    {
        get
        {
            return int.TryParse(pageNumber, out int np) ? np : 1;
        }
        set
        {
            pageNumber = value.ToString();
            var URL = NavigationManager.GetUriWithQueryParameter(nameof(pageNumber), pageNumber);
            NavigationManager.NavigateTo(URL);
        }
    }

    [Parameter]
    [SupplyParameterFromQuery]
    public string nftPageNumber { get; set; } = "1";

    public int gotoNFTPage
    {
        get
        {
            return int.TryParse(nftPageNumber, out int np) ? np : 1;
        }
        set
        {
            if (gotoNFTPage == value) return;
            var URL = NavigationManager.GetUriWithQueryParameter(nameof(nftPageNumber), value.ToString());
            NavigationManager.NavigateTo(URL);
        }
    }

    public bool balancesLoading;
    public bool isLoading = true;
    public readonly int pageSize = 25;
    public readonly int nftPageSize = 12; //6 per row
    public int totalNfts = 0;
    public int nftPages = 1;

    private Account? account { get; set; }
    private LoopringPoolToken? poolToken { get; set; }
    private DomainsDictionary? ensDomains { get; set; }
    private IList<Transaction>? transactions { get; set; } = new List<Transaction>();
    private IList<AccountNFTSlot>? accountNFTSlots { get; set; }
    private CancellationTokenSource? cts;

    protected override async Task OnParametersSetAsync()
    {
        //cancel any previous OnParametersSetAsync which might still be running
        cts?.Cancel();

        using (CancellationTokenSource localCTS = new CancellationTokenSource())
        {
            //give future calls a chance to cancel us; it is now safe to replace
            //any previous value of cts, since we already cancelled it above
            Interlocked.Exchange<CancellationTokenSource?>(ref cts, localCTS);
            try
            {
                isLoading = true;
                //did the account change?
                if (account != null && account.id != accountId)
                {
                    account = null;
                    ensDomains = null;
                    transactions = new List<Transaction>();
                    accountNFTSlots = null;
                    pageNumber = "1";
                    nftPageNumber = "1";
                    StateHasChanged();
                }
                if (accountId == null) return;
                if (account == null)
                {
                    balancesLoading = true;
                    account = await LoopringGraphQLService.GetAccount(accountId, localCTS.Token);
                    localCTS.Token.ThrowIfCancellationRequested();
                    if (account == null) return;
                    StateHasChanged();
                    account!.balances = await LoopringGraphQLService.GetAccountBalance(accountId, localCTS.Token);
                    localCTS.Token.ThrowIfCancellationRequested();
                    if (account is Pool tempPool)
                    {
                        poolToken = await poolTokenCacheService.GetPoolToken(tempPool, localCTS.Token);
                        localCTS.Token.ThrowIfCancellationRequested();
                    }
                    else
                        poolToken = null;
                    if (account.balances != null)
                        foreach (var balance in account.balances)
                        {
                            if (balance.token == null)
                                continue;
                            LoopringPoolToken? poolToken = await poolTokenCacheService.GetPoolToken(balance.token);
                            if (poolToken != null)
                                balance.token = poolToken.token;
                        }
                    balancesLoading = false;
                    StateHasChanged();

                    ensDomains = await ENSCacheService.ReverseLookupAddress(account.address, localCTS.Token);
                    localCTS.Token.ThrowIfCancellationRequested();
                    StateHasChanged();
                }
                if (string.IsNullOrEmpty(pageNumber))
                {
                    pageNumber = "1";
                }

                // Method for getting the total number of NFTS for account
                string totalNftsKey = $"account{accountId}-totalnfts";
                totalNfts = await AppCache.GetOrAddAsyncNonNull(totalNftsKey,
                    async () => await LoopringGraphQLService.GetAccountTotalNfts(accountId, cancellationToken: localCTS.Token),
                    DateTimeOffset.UtcNow.AddMinutes(10));
                localCTS.Token.ThrowIfCancellationRequested();
                nftPages = (int)Math.Ceiling(decimal.Divide(totalNfts, nftPageSize));

                string nftCacheKey = $"account{accountId}-nftSlots-page{nftPageNumber}";
                accountNFTSlots = await AppCache.GetOrAddAsyncNonNull(nftCacheKey,
                    async () => await LoopringGraphQLService.GetAccountNFTs((gotoNFTPage - 1) * nftPageSize, nftPageSize, accountId, localCTS.Token),
                    DateTimeOffset.UtcNow.AddMinutes(10)) ?? new List<AccountNFTSlot>();
                localCTS.Token.ThrowIfCancellationRequested();
                StateHasChanged();

                string transactionCacheKey = $"account{accountId}-transactions-page{pageNumber}";
                transactions = await AppCache.GetOrAddAsyncNonNull(transactionCacheKey,
                    async () => await LoopringGraphQLService.GetAccountTransactions((gotoPage - 1) * pageSize, pageSize, accountId, cancellationToken: localCTS.Token),
                    DateTimeOffset.UtcNow.AddMinutes(10));
                localCTS.Token.ThrowIfCancellationRequested();

                isLoading = false;
            }
            catch (OperationCanceledException)
            {
            }
            catch (Exception e)
            {
                Trace.WriteLine(e.StackTrace + "\n" + e.Message);
            }
            finally
            {
                //now for cleanup, we must clear cts, but only if it is still our localCTS, which we're about to dispose
                //otherwise a new call has already replaced cts with it's own localCTS
                Interlocked.CompareExchange<CancellationTokenSource?>(ref cts, null, localCTS);
            }
        }
    }

    private void ShowCSVOptions()
    {
        var parameters = new DialogParameters();
        parameters.Add("accountId", accountId);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium };

        DialogService.Show<TransactionExportDialog>("Export", parameters, options);
    }
}
