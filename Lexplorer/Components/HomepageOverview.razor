@inject LoopringGraphQLService LoopringGraphQLService;
@inject UniswapGraphQLService UniswapGraphQLService;
@inject NavigationManager NavigationManager;
@inject ILoopStatsService LoopStatsService;
@inject IAppCache AppCache;

    <MudGrid>
        <MudItem sm="12">
            <p hidden="@(transactionData != null)"><MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/></p>
        </MudItem>
        <MudItem xs="12" sm="12" lg="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Total Transactions</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">
                        @blockData?.data?.proxy?.transactionCount.ToString("N0") 
                        <MudText Color="Color.Primary">+@dailyCount.TransactionCount in 24 hours</MudText>
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="12" lg="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Total Blocks</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">
                        @blockData?.data?.proxy?.blockCount.ToString("N0") 
                        <MudText Color="Color.Primary">+@dailyCount.BlockCount in 24 hours</MudText>
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="12" lg="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Total L2 Accounts</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">
                        @blockData?.data?.proxy?.userCount.ToString("N0") 
                        <MudText Color="Color.Primary">+@dailyCount.UserCount in 24 hours</MudText>
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem xs="12" sm="12" lg="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Average Block Time</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@averageBlockTime mins</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="12" lg="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Average Transactions per Block</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@averageTransactions.ToString("N0")</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="12" lg="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Last Block Submitted</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">@lastBlockSubmittedTime mins ago</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem xs="12" sm="12" lg="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">NFT Mint Count</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">
                        @blockData?.data?.proxy?.nftMintCount.ToString("N0") 
                        <MudText Color="Color.Primary">+@dailyCount.NFTMintCount in 24 hours</MudText>
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="12" lg="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">NFT Trade Count</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">
                        @blockData?.data?.proxy?.tradeNFTCount.ToString("N0") 
                        @if(dailyCount.TradeNFTCount > 0)
                        {
                                <MudText Color="Color.Primary">+@dailyCount.TransactionCount in 24 hours</MudText>
                        }
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="12" lg="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">NFT Transfer Count</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">
                        @blockData?.data?.proxy?.transferNFTCount.ToString("N0") 
                        <MudText Color="Color.Primary">+@dailyCount.TransferNFTCount in 24 hours</MudText>
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <MudGrid>
        <MudItem xs="12" sm="12" md="12">
            <MudTable Dense="true" Items="@transactionData?.data?.transactions" Hover="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Latest Transactions</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Tx Id</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>From</MudTh>
                    <MudTh>To</MudTh>
                    <MudTh Style="text-align:right">Bought</MudTh>
                    <MudTh Style="text-align:right">Sold</MudTh>
                    <MudTh Style="text-align:right">Fee</MudTh>
                    <MudTh>Verified At (UTC)</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Transaction Id">@LinkHelper.GetObjectLink(context)</MudTd>
                    <MudTd DataLabel="Type">@context.typeName</MudTd>
                    <TransactionTableDetails TransactionData=@context />
                    <MudTd DataLabel="Timestamp">@TimestampConverter.ToUTCString(@blockData?.data?.blocks?[0].timestamp)</MudTd>
                </RowTemplate>
            </MudTable>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="GoToTransactionOverviewPage">View more transactions</MudButton>
        </MudItem>
        <MudItem xs="12" sm="12" md="6">
            <MudTable Dense="true" Items="@blockData?.data?.blocks" Hover="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Latest Blocks</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Block ID</MudTh>
                    <MudTh>L1 Transaction Hash</MudTh>
                    <MudTh>Block Size</MudTh>
                    <MudTh>Verified At (UTC)</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Block Id"><a Class="mud-theme-primary" href="blocks/@context.id?pageNumber=0">@context.id</a></MudTd>
                    <MudTd DataLabel="L1 Tx"><L1TransactionLink txHash="@context.txHash"></L1TransactionLink></MudTd>
                    <MudTd DataLabel="Block Size">@context.blockSize</MudTd>
                    <MudTd DataLabel="Timestamp">@TimestampConverter.ToUTCString(@context.timestamp!)</MudTd>
                </RowTemplate>
            </MudTable>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="GoToBlockOverviewPage">View more blocks</MudButton>
        </MudItem>
        <MudItem xs="12" sm="12" md="6">
            <MudTable Dense="true" Items="@pairs" Hover="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Pairs</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Pair</MudTh>
                    <MudTh Style="text-align:right">Volume 24H</MudTh>
                    <MudTh Style="text-align:right">24H % avg</MudTh>
                    <MudTh Style="text-align:right">Volume 7D</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <PairsTableDetails pair="@context" uniswapTokens="@uniswapTokens"/>
                </RowTemplate>
            </MudTable>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="GoToPairOverviewPage">View more pairs</MudButton>
        </MudItem>
    </MudGrid>
@code
{
    private Blocks? blockData;
    private Transactions? transactionData;
    private List<Lexplorer.Models.Pair>? pairs { get; set; } = new();
    private Dictionary<string, UniswapToken> uniswapTokens = new();
    private LoopStatsDailyCount dailyCount { get; set; } = new();

    private double averageBlockTime;
    private long averageTransactions;
    private double lastBlockSubmittedTime;

    protected override async Task OnInitializedAsync()
    {
        dailyCount = await LoopStatsService.GetDailyCount();
        string blockCacheKey = $"homepage-block";
        blockData = await AppCache.GetOrAddAsyncNonNull(blockCacheKey, async () => await LoopringGraphQLService.GetBlocks(0, 10), DateTimeOffset.UtcNow.AddMinutes(10));
        CalculateAverageBlockTime();
        CalculateLastBlockSubmitted();
        StateHasChanged();
        string transactionCacheKey = $"homepage-transaction";
        transactionData = await AppCache.GetOrAddAsyncNonNull(transactionCacheKey, async () => await LoopringGraphQLService.GetTransactions(0, 10), DateTimeOffset.UtcNow.AddMinutes(10));
        StateHasChanged();
        string pairsCacheKey = $"homepage-pairs";
        var pairsData = await AppCache.GetOrAddAsyncNonNull(pairsCacheKey, async () => await LoopringGraphQLService.GetPairs(), DateTimeOffset.UtcNow.AddHours(1));
        pairs = pairsData?.data?.pairs;
        foreach (var pair in pairs!)
        {
            if (string.IsNullOrEmpty(pair.token1?.address)) continue;

            string uniswapTokenCacheKey = $"uniSwapTokenPrice-{pair.token1?.address}";
            var uniswapToken = await AppCache.GetOrAddAsyncNonNull(uniswapTokenCacheKey,
                async () => await UniswapGraphQLService.GetTokenPrice(pair.token1?.address!),
                DateTimeOffset.UtcNow.AddHours(1));
            if (string.IsNullOrEmpty(uniswapToken?.address)) continue;

            uniswapTokens.TryAdd(uniswapToken.address!, uniswapToken);
        }
    }

    private void CalculateAverageBlockTime()
    {
        long transactionCount = 0;
        long currentTime = DateTimeOffset.Now.ToUnixTimeSeconds();
        List<long> timeBetweenBlocks = new List<long>();
        foreach (var block in blockData!.data!.blocks!)
        {
            transactionCount += block.transactionCount;
            timeBetweenBlocks.Add(currentTime - long.Parse(block.timestamp!));
            currentTime = long.Parse(block.timestamp!);
        }
        averageTransactions = transactionCount / blockData.data.blocks.Count;
        averageBlockTime = Math.Floor(timeBetweenBlocks.Average() / 60);
    }

    private void CalculateLastBlockSubmitted()
    {
        long currentTime = DateTimeOffset.Now.ToUnixTimeSeconds();
        long timeSinceLastBlock = currentTime - long.Parse(blockData!.data!.blocks![0].timestamp!);
        lastBlockSubmittedTime = Math.Floor((double)timeSinceLastBlock / 60);
    }

    private void GoToBlockOverviewPage()
    {
        string parameters = "blocks";
        NavigationManager.NavigateTo(parameters);
    }

    private void GoToPairOverviewPage()
    {
        string parameters = "pairs";
        NavigationManager.NavigateTo(parameters);
    }

    private void GoToTransactionOverviewPage()
    {
        string parameters = "transactions";
        NavigationManager.NavigateTo(parameters);
    }
}
