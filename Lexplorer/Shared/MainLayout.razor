@inherits LayoutComponentBase
@inject LoopringGraphQLService LoopringGraphQLService
@inject NavigationManager NavigationManager
@inject EthereumService EthereumService
@inject IJSRuntime JS
@inject IDialogService DialogService
@inject ENSCacheService ENSCacheService

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h6" Class="d-none d-sm-flex">The Lexplorer</MudText>
        <MudSpacer />
        <MudTextField Class="d-none d-sm-flex" Style="@($"background:var(--mud-palette-background);")" @bind-Value="searchTerm" Label="Search account, block or transaction" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" AdornmentColor="Color.Info" OnAdornmentClick="DoSearch" Margin="Margin.Dense" />
        <MudSpacer />
        <MudIconButton Class="d-flex d-sm-none" Icon="@Icons.Filled.Search" OnClick="DialogSearch" Color="Color.Inherit"/>
        <MudToggleIconButton @bind-Toggled="@_isDarkMode"
                             Icon="@Icons.Filled.DarkMode" Color="Color.Inherit" Title="DarkMode"
                             ToggledIcon="@Icons.Filled.LightMode" ToggledTitle="LightMode" />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/fudgebucket27/Lexplorer" Target="_blank" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Breakpoint="Breakpoint.Lg" Elevation="1" ClipMode="DrawerClipMode.Docked">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Menu</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer Fixed="true" Class="my-3 pt-0 extra-extra-extra-large">
            <p hidden="@(!searching)"><MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" /></p>
            @if (searchResults?.Count > 0)
            {
                <MudTable Dense="true" Striped="true" Bordered="true" Items="@searchResults" Hover="true">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Search results for "@searchTerm"</MudText>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Found</MudTh>
                        <MudTh>Type</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Found">@LinkHelper.GetObjectLink(context)</MudTd>
                        <MudTd DataLabel="Type">@(context.GetType()?.GetProperty("typeName")?.GetValue(context, null))</MudTd>
                    </RowTemplate>
                </MudTable>
            }
            <CascadingValue Name="_isDarkMode" Value="@_isDarkMode">
                @Body
            </CascadingValue>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;

    private IList<object>? searchResults;
    private bool searching = false;
    private string? _searchTerm;
    private string? searchTerm
    {
        get { return _searchTerm; }
        set
        {
            _searchTerm = value;
            DoSearch();
        }
    }

    private MudTheme _theme = new();
    private bool _isDarkMode = false;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        if ((_searchTerm == null) && (searchResults == null)) return;
        searchTerm = null;
        searchResults = null;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        _isDarkMode = await JS.InvokeAsync<bool>("prefersDarkMode");
    }

    private async void DoSearch()
    {
        if (searchTerm == null) return;
        searching = true;
        searchResults = null;
        StateHasChanged();
        if (searchTerm.Contains(".eth", StringComparison.InvariantCultureIgnoreCase))
        {
            string? hexAddress = await EthereumService.GetEthAddressFromEns(searchTerm);
            if (string.IsNullOrEmpty(hexAddress))
            {
                searching = false; //nothing found
                StateHasChanged();
                return;
            }
            ENSCacheService.AddLookupAddress(searchTerm, hexAddress);
            _searchTerm = hexAddress; //carry on searching with the found address
        }

        searchResults = await LoopringGraphQLService.Search(searchTerm);
        if (searchResults?.Count == 1)
        {
            Tuple<string, string>? adr = LinkHelper.GetObjectLinkAddress(searchResults[0]);
            if (!string.IsNullOrEmpty(adr?.Item1))
                NavigationManager.NavigateTo(adr.Item1);
        }
        searching = false;
        StateHasChanged();
    }

    async Task DialogSearch()
    {
        DialogOptions maxWidth = new DialogOptions()
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            Position = DialogPosition.TopCenter,
            CloseButton = true
        };
        var dialog = DialogService.Show<SearchDialog>("Search", maxWidth);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            searchTerm = result?.Data?.ToString();

            DoSearch();
        }
    }
}